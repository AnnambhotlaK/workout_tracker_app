// Mocks generated by Mockito 5.4.5 from annotations
// in main/test/components/heat_map_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i2;
import 'package:main/data_providers/session_data_provider.dart' as _i3;
import 'package:main/models/exercise.dart' as _i6;
import 'package:main/models/session.dart' as _i4;
import 'package:main/models/set.dart' as _i7;
import 'package:main/theme/theme_provider.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeData_1 extends _i1.SmartFake implements _i2.ThemeData {
  _FakeThemeData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [SessionDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionDataProvider extends _i1.Mock
    implements _i3.SessionDataProvider {
  @override
  set heatMapDataset(Map<DateTime, int>? _heatMapDataset) => super.noSuchMethod(
        Invocation.setter(
          #heatMapDataset,
          _heatMapDataset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<DateTime, List<_i4.Session>> get heatMapSessionDataset =>
      (super.noSuchMethod(
        Invocation.getter(#heatMapSessionDataset),
        returnValue: <DateTime, List<_i4.Session>>{},
        returnValueForMissingStub: <DateTime, List<_i4.Session>>{},
      ) as Map<DateTime, List<_i4.Session>>);

  @override
  set heatMapSessionDataset(
          Map<DateTime, List<_i4.Session>>? _heatMapSessionDataset) =>
      super.noSuchMethod(
        Invocation.setter(
          #heatMapSessionDataset,
          _heatMapSessionDataset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, List<_i4.Session>> get heatMapWeekDataset => (super.noSuchMethod(
        Invocation.getter(#heatMapWeekDataset),
        returnValue: <int, List<_i4.Session>>{},
        returnValueForMissingStub: <int, List<_i4.Session>>{},
      ) as Map<int, List<_i4.Session>>);

  @override
  set heatMapWeekDataset(Map<int, List<_i4.Session>>? _heatMapWeekDataset) =>
      super.noSuchMethod(
        Invocation.setter(
          #heatMapWeekDataset,
          _heatMapWeekDataset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.Session> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: <_i4.Session>[],
        returnValueForMissingStub: <_i4.Session>[],
      ) as List<_i4.Session>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateUser(String? newUserId) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [newUserId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> addSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #addSession,
          [session],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [session],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addExercise(
    _i4.Session? session,
    _i6.Exercise? exercise,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addExercise,
          [
            session,
            exercise,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateExercise(
    _i4.Session? session,
    _i6.Exercise? exercise,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExercise,
          [
            session,
            exercise,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteExercise(
    _i4.Session? session,
    _i6.Exercise? exercise,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteExercise,
          [
            session,
            exercise,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addSet(
    _i4.Session? session,
    _i6.Exercise? exercise,
    _i7.Set? set,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSet,
          [
            session,
            exercise,
            set,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateSet(
    _i4.Session? session,
    _i6.Exercise? exercise,
    _i7.Set? set,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSet,
          [
            session,
            exercise,
            set,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteSet(
    _i4.Session? session,
    _i6.Exercise? exercise,
    _i7.Set? set,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSet,
          [
            session,
            exercise,
            set,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  DateTime getStartDateForHeatMap() => (super.noSuchMethod(
        Invocation.method(
          #getStartDateForHeatMap,
          [],
        ),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.method(
            #getStartDateForHeatMap,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_0(
          this,
          Invocation.method(
            #getStartDateForHeatMap,
            [],
          ),
        ),
      ) as DateTime);

  @override
  void showActivityOnDay(
    _i2.BuildContext? context,
    DateTime? date,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showActivityOnDay,
          [
            context,
            date,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearDataOnLogout() => super.noSuchMethod(
        Invocation.method(
          #clearDataOnLogout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i9.ThemeProvider {
  @override
  _i2.ThemeData get themeData => (super.noSuchMethod(
        Invocation.getter(#themeData),
        returnValue: _FakeThemeData_1(
          this,
          Invocation.getter(#themeData),
        ),
        returnValueForMissingStub: _FakeThemeData_1(
          this,
          Invocation.getter(#themeData),
        ),
      ) as _i2.ThemeData);

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set themeData(_i2.ThemeData? themeData) => super.noSuchMethod(
        Invocation.setter(
          #themeData,
          themeData,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void toggleTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loadThemeFromSettings() => super.noSuchMethod(
        Invocation.method(
          #loadThemeFromSettings,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
